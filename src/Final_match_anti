import time

from fischertechnik.controller.Motor import Motor
from lib.camera import *
from lib.controller import *


time2 = None
r = None
red = None
angle_straight = None
g = None
sense = None
green = None
b = None
blue = None


def Path1Red2():
    global time2, r, red, angle_straight, g, sense, green, b, blue
    TXT_M_S2_servomotor.set_position(int(60))
    move_backwards(1.3)
    TXT_M_S2_servomotor.set_position(int(angle_straight))
    move_front(2.5)
    TXT_M_S2_servomotor.set_position(int(60))
    move_front(1)
    TXT_M_S2_servomotor.set_position(int(angle_straight))
    move_front(3.4)
    sense = 2


def Path1Green():
    global time2, r, red, angle_straight, g, sense, green, b, blue
    TXT_M_S2_servomotor.set_position(int(260))
    move_backwards(1)
    TXT_M_S2_servomotor.set_position(int(angle_straight))
    move_front(2.4)
    TXT_M_S2_servomotor.set_position(int(260))
    move_front(2.5)
    TXT_M_S2_servomotor.set_position(int(60))
    move_front(2.2)
    sense = 2


def Path1Red():
    global time2, r, red, angle_straight, g, sense, green, b, blue
    TXT_M_S2_servomotor.set_position(int(60))
    move_backwards(1.3)
    TXT_M_S2_servomotor.set_position(int(angle_straight))
    move_front(2.5)
    TXT_M_S2_servomotor.set_position(int(60))
    move_front(1)
    TXT_M_S2_servomotor.set_position(int(angle_straight))
    move_front(3.4)
    sense = 2


def SonarSensor():
    global time2, r, red, angle_straight, g, sense, green, b, blue
    TXT_M_S2_servomotor.set_position(int(160))
    move_backwards(1.7)
    TXT_M_S2_servomotor.set_position(int(60))
    move_front(2.8)
    TXT_M_S2_servomotor.set_position(int(angle_straight))
    move_backwards(1.5)
    sense = 3


def Path2Red():
    global time2, r, red, angle_straight, g, sense, green, b, blue
    TXT_M_S2_servomotor.set_position(int(60))
    move_backwards(1)
    TXT_M_S2_servomotor.set_position(int(angle_straight))
    move_front(2.5)
    TXT_M_S2_servomotor.set_position(int(60))
    move_front(2.8)
    TXT_M_S2_servomotor.set_position(int(260))
    move_front(1.6)
    TXT_M_S2_servomotor.set_position(int(angle_straight))
    move_front(2)
    sense = 3


def Path2Red2():
    global time2, r, red, angle_straight, g, sense, green, b, blue
    TXT_M_S2_servomotor.set_position(int(60))
    move_backwards(1)
    TXT_M_S2_servomotor.set_position(int(angle_straight))
    move_front(2.5)
    TXT_M_S2_servomotor.set_position(int(60))
    move_front(2.6)
    TXT_M_S2_servomotor.set_position(int(260))
    move_front(1.3)
    TXT_M_S2_servomotor.set_position(int(angle_straight))
    move_front(1)
    sense = 3


def Path2Green():
    global time2, r, red, angle_straight, g, sense, green, b, blue
    TXT_M_S2_servomotor.set_position(int(60))
    move_backwards(1.2)
    TXT_M_S2_servomotor.set_position(int(angle_straight))
    move_front(2.4)
    TXT_M_S2_servomotor.set_position(int(60))
    move_front(2.4)
    TXT_M_S2_servomotor.set_position(int(270))
    move_front(1.5)
    TXT_M_S2_servomotor.set_position(int(angle_straight))
    move_front(1)
    sense = 3


def color_callback(event):
    global time2, r, red, angle_straight, g, sense, green, b, blue
    red = event.value.get_rgb_red()
    green = event.value.get_rgb_green()
    blue = event.value.get_rgb_blue()


def color_callback2(event):
    global time2, r, red, angle_straight, g, sense, green, b, blue
    r = event.value.get_rgb_red()
    g = event.value.get_rgb_green()
    b = event.value.get_rgb_blue()


def move_backwards(time2):
    global r, red, angle_straight, g, sense, green, b, blue
    TXT_M_M1_encodermotor.set_speed(int(400), Motor.CW)
    TXT_M_M1_encodermotor.start_sync()
    time.sleep(time2)


def real_wait(time2):
    global r, red, angle_straight, g, sense, green, b, blue
    TXT_M_M1_encodermotor.set_speed(int(0), Motor.CW)
    TXT_M_M1_encodermotor.start_sync()
    time.sleep(time2)


def move_front(time2):
    global r, red, angle_straight, g, sense, green, b, blue
    TXT_M_M1_encodermotor.set_speed(int(400), Motor.CCW)
    TXT_M_M1_encodermotor.start_sync()
    time.sleep(time2)


color_detector2.add_detection_listener(color_callback)
color_detector.add_detection_listener(color_callback2)


r = 0
g = 0
b = 0
red = 0
green = 0
blue = 0
green = 0
angle_straight = 150
sense = 1
if TXT_M_I4_mini_switch.is_open():
    TXT_M_S2_servomotor.set_position(int(160))
    real_wait(1)
    while True:
        if sense == 1 and red > 100 and green < 70 and blue < 70:
            Path1Red()
        elif sense == 1 and r > 100 and g < 70 and b < 70:
            Path1Red2()
        elif sense == 1 and g > 100 and b < 70 and r < 70:
            Path1Green()
        else:
            TXT_M_S2_servomotor.set_position(int(angle_straight))
        if sense == 2:
            while not (TXT_M_I2_ultrasonic_distance_meter.get_distance() <= 30):
                TXT_M_S2_servomotor.set_position(int(angle_straight))
                move_front(1)
            if TXT_M_I2_ultrasonic_distance_meter.get_distance() <= 30:
                SonarSensor()
        if sense == 3 and red > 85 and green < 85 and blue < 85:
            Path2Red2()
        elif sense == 3 and r > 100 and g < 70 and b < 70:
            Path2Red()
        elif sense == 3 and g > 100 and b < 70 and r < 70:
            Path2Green()
        else:
            TXT_M_M1_encodermotor.stop_sync()


